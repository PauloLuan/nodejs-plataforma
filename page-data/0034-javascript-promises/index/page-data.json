{"componentChunkName":"component---src-templates-docs-js","path":"/0034-javascript-promises/index","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Maratona Programação | Reativa","docsLocation":""}},"mdx":{"id":"3a00389c-bd86-5d60-96fe-fa9693f222cd","fields":{"id":"3a00389c-bd86-5d60-96fe-fa9693f222cd","title":"Entendendo JavaScript Promises","slug":"/0034-javascript-promises/index"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entendendo JavaScript Promises\",\n  \"description\": \"As promessas são uma forma de lidar com o código assíncrono em JavaScript, sem escrever muitos retornos de chamada em seu código.\",\n  \"section\": \"Getting Started\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Introdu\\xE7\\xE3o a Promises\"), mdx(\"iframe\", {\n    title: \"Introduction to promises\",\n    src: \"https://glitch.com/embed/#!/embed/nodejs-dev-0034-01?path=server.js&previewSize=35&attributionHidden=true&sidebarCollapsed=true\",\n    alt: \"nodejs-dev-0034-01 on Glitch\",\n    style: {\n      \"height\": \"400px\",\n      \"width\": \"100%\",\n      \"border\": \"0\"\n    }\n  }), mdx(\"p\", null, \"Uma promise (promessa) \\xE9 comumente definida como \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"um proxy para um valor que eventualmente ficar\\xE1 dispon\\xEDvel\"), \".\"), mdx(\"p\", null, \"Promises s\\xE3o um jeito de lidar com c\\xF3digo ass\\xEDncrono, sem ficar preso em \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://callbackhell.com/\"\n  }), \"\\\"inferno de callbacks\\\" (callback hell)\"), \".\"), mdx(\"p\", null, \"Promises s\\xE3o parte da linguagem por anos (introduzidas e padronizadas no ES2015), e se tornaram mais integradas recentemente, com \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"async\"), \" e \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"await\"), \" no ES2017.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Fun\\xE7\\xF5es async\"), \" usam promises por baixo dos panos, ent\\xE3o entender como promises funcionam \\xE9 fundamental para entender como \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"async\"), \" e \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"await\"), \" funcionam.\"), mdx(\"h3\", null, \"Como promises funcionam, resumidamente\"), mdx(\"p\", null, \"Uma vez que a promise tenha sido chamada, ela inicia em um \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"estado pendente (pending)\"), \". Isso significa que a fun\\xE7\\xE3o que a chamou continua executando, enquanto a promise estiver pendente at\\xE9 que se resolva, retornando \\xE0 fun\\xE7\\xE3o que a invocou os dados que foram requisitados.\"), mdx(\"p\", null, \"A promise criada vai eventualmente se encerrar em um \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"estado resolvido (resolved)\"), \", ou em um \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"estado rejeitado (rejected)\"), \", chamando as respectivas fun\\xE7\\xF5es callback (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"then\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \") ao terminar.\"), mdx(\"h3\", null, \"Quais APIs JS usam promises?\"), mdx(\"p\", null, \"Em adi\\xE7\\xE3o ao seu c\\xF3digo e o de bibliotecas, promises s\\xE3o usadas por padr\\xE3o em APIs web modernas, como:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Battery API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fetch API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Service Workers\")), mdx(\"p\", null, \"\\xC9 improv\\xE1vel que voc\\xEA mesmo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n\\xE3o\"), \" esteja utilizando promises no JavaScript moderno, ent\\xE3o vamos come\\xE7ar a mergulhar nelas.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Criando uma promise\"), mdx(\"p\", null, \"A Promise API exp\\xF5e um contrutor Promise, por onde voc\\xEA inicializa usando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Promise()\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let done = true\\n\\nconst isItDoneYet = new Promise((resolve, reject) => {\\n  if (done) {\\n    const workDone = 'Here is the thing I built'\\n    resolve(workDone)\\n  } else {\\n    const why = 'Still working on something else'\\n    reject(why)\\n  }\\n})\\n\")), mdx(\"p\", null, \"Como voc\\xEA pode ver, a promise checa a constante global \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"done\"), \", e se for true, a promise vai para o estado \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"resolved\"), \" (uma vez que a callback \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resolve\"), \" tenha sido chamada); caso contr\\xE1rio, a callback \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reject\"), \" \\xE9 executada, colocando a promise em um estado \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"rejected\"), \". (Se nenhuma dessas fun\\xE7\\xF5es \\xE9 chamada, a promise permanece no estado \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pending\"), \").\"), mdx(\"p\", null, \"Usando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resolve\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reject\"), \", podemos nos comunicar com a fun\\xE7\\xE3o invocadora dizendo qual estado a promise estava, e o que fazer com isso. No caso acima n\\xF3s s\\xF3 retornamos uma string, mas poderia ser um objeto, ou mesmo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \". S\\xF3 de termos criado a promise no trecho acima, ela j\\xE1 come\\xE7ou a executar. \\xC9 importante entender o que est\\xE1 acontecendo na se\\xE7\\xE3o \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#consumindo-uma-promise\"\n  }), \"Consumindo uma promise\"), \" logo abaixo.\"), mdx(\"p\", null, \"Um exemplo mais comum que voc\\xEA pode encontrar pois a\\xED \\xE9 uma t\\xE9cnica chamada \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Promisifying (promissificar)\"), \". Essa t\\xE9cnica \\xE9 um jeito de poder usar uma fun\\xE7\\xE3o JavaScript cl\\xE1ssica que recebe uma callback, e retornar uma promise:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const fs = require('fs')\\n\\nconst getFile = (fileName) => {\\n  return new Promise((resolve, reject) => {\\n    fs.readFile(fileName, (err, data) => {\\n      if (err) {\\n        reject (err)  // chamar `reject` vai fazer com  que a promise falhe com ou sem o erro passado como argumento\\n        return        // e n\\xE3o queremos ir mais longe\\n      }\\n      resolve(data)\\n    })\\n  })\\n}\\n\\ngetFile('/etc/passwd')\\n.then(data => console.log(data))\\n.catch(err => console.error(err))\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Em vers\\xF5es recentes do Node.js, voc\\xEA n\\xE3o precisa fazer essa convers\\xE3o manual para grande parte da API. H\\xE1 uma fun\\xE7\\xE3o promisifying dispon\\xEDvel no \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/docs/latest-v11.x/api/util.html#util_util_promisify_original\"\n  }), \"m\\xF3dulo util\"), \" que far\\xE1 isso por voc\\xEA, dado que a fun\\xE7\\xE3o que voc\\xEA esteja \\\"promissificando\\\" siga a assinatura correta.\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Consumindo uma promise\"), mdx(\"p\", null, \"Na \\xFAltima se\\xE7\\xE3o, n\\xF3s introduzimos como uma promise \\xE9 criada.\"), mdx(\"p\", null, \"Agora vamos ver como uma promise pode ser \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"consumida\"), \" ou usada.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isItDoneYet = new Promise(/* ... como acima ... */)\\n//...\\n\\nconst checkIfItsDone = () => {\\n  isItDoneYet\\n    .then(ok => {\\n      console.log(ok)\\n    })\\n    .catch(err => {\\n      console.error(err)\\n    })\\n}\\n\")), mdx(\"p\", null, \"Rodar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checkIfItsDone()\"), \" vai especificar fun\\xE7\\xF5es para executar quando a promise \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isItDoneYet\"), \" resolver (na chamada \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"then\"), \") ou rejeitar (na chamada \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \").\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Encadeando promises\"), mdx(\"p\", null, \"Uma promise pode ser retornada para outra promise, criando uma cadeia de promises.\"), mdx(\"p\", null, \"Um \\xF3timo exemplo de encadeamento de promises \\xE9 a Fetch API, que podemos usar para obter um recurso e enfileirar uma cadeia de promises para executar quando o recurso for obtido.\"), mdx(\"p\", null, \"A Fetch API um mecanismo baseado em promise, e chamar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch()\"), \" \\xE9 equivalente a definir suas pr\\xF3prias promises usando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Promise()\"), \".\"), mdx(\"h3\", null, \"Exemplo de encadeamento de promises\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const status = response => {\\n  if (response.status >= 200 && response.status < 300) {\\n    return Promise.resolve(response)\\n  }\\n  return Promise.reject(new Error(response.statusText))\\n}\\n\\nconst json = response => response.json()\\n\\nfetch('/todos.json')\\n  .then(status)    // note que a fun\\xE7\\xE3o `status` \\xE9 na verdade **chamada** aqui, e ela **retorna uma promise**\\n  .then(json)      // da mesma forma, a \\xFAnica diferen\\xE7a aqui \\xE9 que a fun\\xE7\\xE3o `json` retorna uma promise que \\xE9 resolvida com `data`\\n  .then(data => {  // ... por isso que `data` aparece aqui como primeiro par\\xE2metro da fun\\xE7\\xE3o an\\xF4nima\\n    console.log('Request succeeded with JSON response', data)\\n  })\\n  .catch(error => {\\n    console.log('Request failed', error)\\n  })\\n\")), mdx(\"p\", null, \"Nesse exemplo, n\\xF3s chamamos \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch()\"), \" para obter uma lita de items TODO do arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"todos.json\"), \" localizado na raiz do dom\\xEDnio, e n\\xF3s criamos uma cadeia de promises.\"), mdx(\"p\", null, \"Rodanr \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch()\"), \" retorna uma \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://fetch.spec.whatwg.org/#concept-response\"\n  }), \"response (resposta)\"), \", que cont\\xE9m v\\xE1rias propriedades, e dentre elas as que usamos no exemplo:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"status\"), \", um valor num\\xE9rico representando o c\\xF3digo de status HTTP\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"statusText\"), \", uma mensagem de status, que ser\\xE1 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OK\"), \" se a requisi\\xE7\\xE3o for bem-sucedida.\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"response\"), \" tamb\\xE9m tem um m\\xE9todo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"json()\"), \", que retorna uma promise que vai resolver com o conte\\xFAdo do body processado e transformado em JSON.\"), mdx(\"p\", null, \"Ent\\xE3o dadas essas promises, isso \\xE9 o que acontece: a primeira promise na cadeia \\xE9 a fun\\xE7\\xE3o que n\\xF3s definimos, chamada \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"status()\"), \", que checa o status da response e se n\\xE3o for uma resposta bem-sucedida (entre 200 e 299), a promise \\xE9 rejeitada.\"), mdx(\"p\", null, \"Essa opera\\xE7\\xE3o far\\xE1 com que a cadeia de promises pule todas promises encadeadas e pule diretamente para o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch()\"), \" no final, logando o texto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Request failed\"), \" e a mensagem de erro.\"), mdx(\"p\", null, \"Se em vez disso obter suceddo, \\xE9 chamada a fun\\xE7\\xE3o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"json()\"), \" que definimos. Desde que a promise anterior, quando bem-sucedida, tenha retornado o objeto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"response\"), \", n\\xF3s o obtemos como um input para a segunda promise.\"), mdx(\"p\", null, \"Nesse caso, n\\xF3s retornamos os dados processados em JSON, assim a terceira promise recebe o JSON diretamente:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \".then((data) => {\\n  console.log('Request succeeded with JSON response', data)\\n})\\n\")), mdx(\"p\", null, \"e n\\xF3s simplesmente o logamos no console.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Tratando erros\"), mdx(\"p\", null, \"No exemplo da se\\xE7\\xE3o anterior, n\\xF3s tinhamos um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \" que foi adicionado na cadeia de promises.\"), mdx(\"p\", null, \"Quando qualquer coisa na cadeia de promises falha e dispara um erro ou rejeita uma promise, o controle vai para o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch()\"), \" mais pr\\xF3ximo na cadeia.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"new Promise((resolve, reject) => {\\n  throw new Error('Error')\\n}).catch(err => {\\n  console.error(err)\\n})\\n\\n// or\\n\\nnew Promise((resolve, reject) => {\\n  reject('Error')\\n}).catch(err => {\\n  console.error(err)\\n})\\n\")), mdx(\"h3\", null, \"Cascateando erros\"), mdx(\"p\", null, \"Se dentro do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch()\"), \" voc\\xEA lan\\xE7ar um erro, voc\\xEA pode adicionar um segundo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch()\"), \" para trat\\xE1-lo, e assim por diante.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"new Promise((resolve, reject) => {\\n  throw new Error('Error')\\n})\\n  .catch(err => {\\n    throw new Error('Error')\\n  })\\n  .catch(err => {\\n    console.error(err)\\n  })\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Orquestrando promises\"), mdx(\"h3\", null, \"Promise.all()\"), mdx(\"p\", null, \"Se voc\\xEA precisa sincronizar promises diferentes, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise.all()\"), \" te ajuda a definir uma lista de promises, e executa algo quando elas todas s\\xE3o resolvidas.\"), mdx(\"p\", null, \"Examplo:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const f1 = fetch('/something.json')\\nconst f2 = fetch('/something2.json')\\n\\nPromise.all([f1, f2])\\n  .then(res => {\\n    console.log('Array of results', res)\\n  })\\n  .catch(err => {\\n    console.error(err)\\n  })\\n\")), mdx(\"p\", null, \"A sintaxe de atribui\\xE7\\xE3o por desestrutura\\xE7\\xE3o do ES2015 permite que voc\\xEA tamb\\xE9m fa\\xE7a isso:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Promise.all([f1, f2]).then(([res1, res2]) => {\\n  console.log('Results', res1, res2)\\n})\\n\")), mdx(\"p\", null, \"\\xC9 claro que voc\\xEA n\\xE3o est\\xE1 limitado a s\\xF3 usar o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"qualquer promise pode ser usada dessa forma\"), \".\"), mdx(\"h3\", null, \"Promise.race()\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise.race()\"), \" roda quando a primeira das promises que voc\\xEA passar for resolvida, e roda a callback anexada apenas uma vez, com o resultado da primeira promise resolvida.\"), mdx(\"p\", null, \"Exemplo:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const first = new Promise((resolve, reject) => {\\n  setTimeout(resolve, 500, 'first')\\n})\\nconst second = new Promise((resolve, reject) => {\\n  setTimeout(resolve, 100, 'second')\\n})\\n\\nPromise.race([first, second]).then(result => {\\n  console.log(result) // second\\n})\\n\")), mdx(\"h2\", null, \"Erros comuns\"), mdx(\"h3\", null, \"Uncaught TypeError: undefined is not a promise\"), mdx(\"p\", null, \"Se voc\\xEA obter um erro \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Uncaught TypeError: undefined is not a promise\"), \" no console, certifique-se de usar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Promise()\"), \" em vez de apenas \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise()\"), \".\"), mdx(\"h3\", null, \"UnhandledPromiseRejectionWarning\"), mdx(\"p\", null, \"Isso significa que a promise que voc\\xEA chamou foi rejeitada, mas n\\xE3o tinha nenhum \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \" preparado para tratar o erro. Adicione um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \" depois do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"then\"), \" causador do erro para trat\\xE1-lo propriamente.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#introdução-a-promises","title":"Introdução a Promises","items":[{"url":"#como-promises-funcionam-resumidamente","title":"Como promises funcionam, resumidamente"},{"url":"#quais-apis-js-usam-promises","title":"Quais APIs JS usam promises?"}]},{"url":"#criando-uma-promise","title":"Criando uma promise"},{"url":"#consumindo-uma-promise","title":"Consumindo uma promise"},{"url":"#encadeando-promises","title":"Encadeando promises","items":[{"url":"#exemplo-de-encadeamento-de-promises","title":"Exemplo de encadeamento de promises"}]},{"url":"#tratando-erros","title":"Tratando erros","items":[{"url":"#cascateando-erros","title":"Cascateando erros"}]},{"url":"#orquestrando-promises","title":"Orquestrando promises","items":[{"url":"#promiseall","title":"Promise.all()"},{"url":"#promiserace","title":"Promise.race()"}]},{"url":"#erros-comuns","title":"Erros comuns","items":[{"url":"#uncaught-typeerror-undefined-is-not-a-promise","title":"Uncaught TypeError: undefined is not a promise"},{"url":"#unhandledpromiserejectionwarning","title":"UnhandledPromiseRejectionWarning"}]}]},"parent":{"__typename":"File","id":"32893684-f971-502b-85a8-03c686c631c5","relativePath":"0034-javascript-promises/index.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"id":"a65b4705-0eed-56e8-b4b6-933dedb24081","fields":{"slug":"/","title":"Introdução"}}},{"node":{"id":"e0266471-a669-58a3-8209-a73e1ee6e57f","fields":{"slug":"/introduction","title":"Paulo Luan"}}},{"node":{"id":"42c26de6-7e97-598b-b43c-11dd5466ec39","fields":{"slug":"/0001-node-introduction/index","title":"Introdução ao Node.js"}}},{"node":{"id":"a1e1134d-92e7-56fc-941e-4c6325f7846b","fields":{"slug":"/0002-node-history/index","title":"Uma breve história do Node.js"}}},{"node":{"id":"52480c71-9a02-5841-8eca-93549ddac5a8","fields":{"slug":"/0003-node-installation/index","title":"Como instalar o Node.js"}}},{"node":{"id":"18efbda9-eb19-5e00-bc71-286077fee257","fields":{"slug":"/0004-node-javascript-language/index","title":"Quanto de JavaScript você precisa saber para usar Node.js?"}}},{"node":{"id":"43c36588-1b06-5f6e-afb3-1a9fed146c3a","fields":{"slug":"/0005-node-difference-browser/index","title":"Diferenças entre Node.js e o navegador"}}},{"node":{"id":"d9960a3f-642f-5f64-9989-b65169fca219","fields":{"slug":"/0006-v8/index","title":"O V8 JavaScript Engine"}}},{"node":{"id":"16fbea41-49c3-5eb5-b52b-0f0911328da7","fields":{"slug":"/0007-node-run-cli/index","title":"Execute scripts Node.js na linha de comando"}}},{"node":{"id":"55d64ff2-ed1a-5691-a74f-42f51719725f","fields":{"slug":"/0008-node-terminate-program/index","title":"Como sair de um programa Node.js"}}},{"node":{"id":"3c5289c0-d392-58c9-9cb9-f10702617740","fields":{"slug":"/0009-node-environment-variables/index","title":"Como ler variáveis de ambiente do Node.js"}}},{"node":{"id":"0ae8b199-d649-5ed9-9b66-5814b2b9844e","fields":{"slug":"/0011-node-repl/index","title":"Como usar o REPL no Node.js"}}},{"node":{"id":"f40177d2-fda3-58fc-bcf5-4c879d4116d4","fields":{"slug":"/0012-node-cli-args/index","title":"Node.js, aceite os argumentos da linha de comando"}}},{"node":{"id":"ac8f1b2e-90ca-5ca7-aece-85fcfea0d9c8","fields":{"slug":"/0013-node-output-to-cli/index","title":"Saída para a linha de comando usando Node.js"}}},{"node":{"id":"799cac38-24ef-5228-805d-5cdbb93e4aca","fields":{"slug":"/0014-node-input-from-cli/index","title":"Aceite a entrada da linha de comando em Node.js"}}},{"node":{"id":"024fd275-46de-532d-a8f3-dd655bdd4eb4","fields":{"slug":"/0015-node-export-module/index","title":"Expor a funcionalidade de um arquivo Node.js usando exportações"}}},{"node":{"id":"22ab8dd2-1be7-5d37-a2b1-99ae0e580ff0","fields":{"slug":"/0016-npm/index","title":"Uma introdução ao gerenciador de pacotes npm"}}},{"node":{"id":"10b436e8-9b63-52b7-a7cf-b73fead2cd7e","fields":{"slug":"/0017-where-npm-install-packages/index","title":"Onde o npm instala os pacotes?"}}},{"node":{"id":"700541dd-d991-5e18-8b41-80cb765239aa","fields":{"slug":"/0018-how-to-use-npm-package/index","title":"Como usar ou executar um pacote instalado usando npm"}}},{"node":{"id":"b5a322f1-6464-59fa-8159-cea9532188bc","fields":{"slug":"/0019-package-json/index","title":"O guia do package.json"}}},{"node":{"id":"fd1a3057-a44f-562c-ae9a-c44dc8a2d56b","fields":{"slug":"/0020-package-lock-json/index","title":"O arquivo package-lock.json"}}},{"node":{"id":"0bd5cb0c-72cd-5308-9b65-2df877e42d32","fields":{"slug":"/0021-npm-know-version-installed/index","title":"Encontre a versão instalada de um pacote npm"}}},{"node":{"id":"0771146e-6675-52dc-87e1-e7de8088baeb","fields":{"slug":"/0022-npm-install-previous-package-version/index","title":"Instale uma versão mais antiga de um pacote npm"}}},{"node":{"id":"0f9169ec-148a-5f65-a2b8-53b552b8f13e","fields":{"slug":"/0023-update-npm-dependencies/index","title":"Atualize todas as dependências do Node.js para a versão mais recente"}}},{"node":{"id":"41de046d-776c-5099-8efd-16a537b476f4","fields":{"slug":"/0024-npm-semantic-versioning/index","title":"Semantic Versioning com npm"}}},{"node":{"id":"55f887e9-e523-5d89-9aad-fecc89c74bd2","fields":{"slug":"/0025-npm-uninstall-packages/index","title":"Desinstalando pacotes npm"}}},{"node":{"id":"6940db00-8ff8-5438-a80c-df0b4466461c","fields":{"slug":"/0026-npm-packages-local-global/index","title":"Pacotes npm global ou local"}}},{"node":{"id":"a8b1e2fe-b2c8-5c8e-b6dd-b5e433051962","fields":{"slug":"/0027-npm-dependencies-devdependencies/index","title":"npm dependencies e devDependencies"}}},{"node":{"id":"c02b0eb8-7b90-577c-a12d-97f8e14aa378","fields":{"slug":"/0028-npx/index","title":"O npx Package Runner"}}},{"node":{"id":"087d819a-bd00-57eb-8b0b-800cdaec0968","fields":{"slug":"/0029-node-event-loop/index","title":"Event Loop"}}},{"node":{"id":"dcba573b-cb6b-5691-aa38-a89e391861aa","fields":{"slug":"/0030-node-process-nexttick/index","title":"Entendendo process.nextTick()"}}},{"node":{"id":"33cec0b8-3a50-5fc5-a677-d88bc7da5251","fields":{"slug":"/0031-node-setimmediate/index","title":"Entendendo setImmediate()"}}},{"node":{"id":"519abdd4-c5ae-5ae6-9afb-68252d0c2761","fields":{"slug":"/0033-javascript-callbacks/index","title":"Programação assíncrona de JavaScript e Callbacks"}}},{"node":{"id":"6cd9c004-9a37-530b-9ed4-8152bcd9507c","fields":{"slug":"/0032-javascript-timers/index","title":"JavaScript Timers"}}},{"node":{"id":"878ebf1f-a5b7-5d5b-8225-e6a43dd30424","fields":{"slug":"/0035-javascript-async-await/index","title":"JavaScript assíncrono moderno com Async e Await"}}},{"node":{"id":"3a00389c-bd86-5d60-96fe-fa9693f222cd","fields":{"slug":"/0034-javascript-promises/index","title":"Entendendo JavaScript Promises"}}},{"node":{"id":"fcd4c0b5-3fa4-54d7-87ac-9d231869c551","fields":{"slug":"/0036-node-event-emitter/index","title":"Event emitter"}}},{"node":{"id":"97dbb48c-b81e-570c-ab65-99d37fa33c36","fields":{"slug":"/0037-node-http-server/index","title":"Construindo um servidor HTTP"}}},{"node":{"id":"62bea45f-4a81-5e47-8c9a-ecf3923d5214","fields":{"slug":"/0038-node-make-http-requests/index","title":"Fazer solicitações HTTP com Node.js"}}},{"node":{"id":"c5181623-fba9-5923-8192-ae9511a3893a","fields":{"slug":"/0039-node-http-post/index","title":"Faça uma requisição HTTP POST usando Node.js"}}},{"node":{"id":"4e3fa518-bc3b-5c92-81a7-be76d63a09b9","fields":{"slug":"/0040a-node-request-data/index","title":"Get HTTP request body data usando Node.js"}}},{"node":{"id":"9713aff1-5dc6-5a7a-ba44-dda5165e7178","fields":{"slug":"/0040b-node-file-descriptors/index","title":"Trabalhar com descritores de arquivo em Node.js"}}},{"node":{"id":"fe8f9934-fc52-581e-815b-8619bbcad08f","fields":{"slug":"/0041-node-file-stats/index","title":"Como obter os detalhes de um arquivo usando Node.js"}}},{"node":{"id":"b7fc9a0b-cc4e-50d8-97b0-f3fdc4fb1f5f","fields":{"slug":"/0042-node-file-paths/index","title":"Path de arquivo Node.js"}}},{"node":{"id":"6fd37433-1e94-5904-91a7-244c58b51c1c","fields":{"slug":"/0043-node-reading-files/index","title":"Como Ler arquivos usando Node.js"}}},{"node":{"id":"5a97581d-5681-5f8a-8564-9f686385fc99","fields":{"slug":"/0044-node-writing-files/index","title":"Gravando arquivos com Node.js"}}},{"node":{"id":"b906bea1-5dee-5d11-b669-dbb641a2372d","fields":{"slug":"/0045-node-folders/index","title":"Trabalho com pastas em Node.js"}}},{"node":{"id":"4c6926f8-fa86-528c-a9cc-70463279a03f","fields":{"slug":"/0046-node-module-fs/index","title":"O módulo fs do Node.js"}}},{"node":{"id":"07202fbe-3f50-5c5b-8995-5b5bab6e7845","fields":{"slug":"/0047-node-module-path/index","title":"O módulo de path do Node.js"}}},{"node":{"id":"fce11111-3ffb-50de-b24f-da8b4963943d","fields":{"slug":"/0048-node-module-os/index","title":"O módulo de sistema operacional Node.js."}}},{"node":{"id":"eac2e7a4-7487-57d8-9b19-cea62201ca8d","fields":{"slug":"/0049-node-module-events/index","title":"O módulo de eventos do Node.js"}}},{"node":{"id":"de4facf3-a5be-58ac-80af-43dfc6825ffe","fields":{"slug":"/0050-node-module-http/index","title":"O módulo http do Node.js"}}},{"node":{"id":"b0f1bbce-00b2-58f6-8877-f544a71ea4fe","fields":{"slug":"/0051-node-buffers/index","title":"Node.js Buffers"}}},{"node":{"id":"648dfbc8-c27f-5a82-9619-46c5cef03d06","fields":{"slug":"/0052-nodejs-streams/index","title":"Node.js Streams"}}},{"node":{"id":"4e7a56e4-80ae-5edf-8824-1d2a6fc6cde4","fields":{"slug":"/0053-node-difference-dev-prod/index","title":"Node.js, a diferença entre desenvolvimento e produção"}}},{"node":{"id":"8f019620-7b25-5985-bf0a-e6cbf935264d","fields":{"slug":"/0054-node-exceptions/index","title":"Tratamento de erros no Node.js"}}},{"node":{"id":"4355ebf5-bfaf-57cb-a719-04375f7c5633","fields":{"slug":"/0055-node-inspect-object/index","title":"Como Loggar um objeto no Node.js"}}}]}},"pageContext":{"id":"3a00389c-bd86-5d60-96fe-fa9693f222cd"}}}