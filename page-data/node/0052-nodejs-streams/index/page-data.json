{"componentChunkName":"component---src-templates-docs-js","path":"/node/0052-nodejs-streams/index","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Maratona Programação | Reativa","docsLocation":""}},"mdx":{"id":"c44130ab-1d0d-50fb-b50a-51c756a08689","fields":{"id":"c44130ab-1d0d-50fb-b50a-51c756a08689","title":"Node.js Streams","slug":"/node/0052-nodejs-streams/index"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Node.js Streams\",\n  \"description\": \"Aprenda para que servem os streams, por que são tão importantes e como usá-los.\",\n  \"section\": \"Getting Started\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"O que s\\xE3o streams\"), mdx(\"p\", null, \"Streams s\\xE3o um dos conceitos fundamentais que empoderam aplica\\xE7\\xF5es Node.js.\"), mdx(\"p\", null, \"Elas s\\xE3o um jeito de lidar com leitura/escrita de arquivos, comunica\\xE7\\xF5es em rede, ou qualquer tipo de troca de informa\\xE7\\xE3o end-to-end de uma forma eficiente.\"), mdx(\"p\", null, \"Streams n\\xE3o s\\xE3o um conceito \\xFAnico do Node.js. Elas foram introduzidas no sistema operacional Unix d\\xE9cadas atr\\xE1s, permitindo que programas possam interagir uns com os outros passando streams, atrav\\xE9s do operador pipe (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"|\"), \").\"), mdx(\"p\", null, \"Por exemplo, em uma abordagem tradicional, quando voc\\xEA diz ao programa para ler um arquivo, o arquivo \\xE9 lido na mem\\xF3ria, do come\\xE7o ao fim, e ent\\xE3o \\xE9 processado.\"), mdx(\"p\", null, \"Utilizando streams voc\\xEA l\\xEA peda\\xE7o por peda\\xE7o, processando o conte\\xFAdo sem mant\\xEA-lo completo na mem\\xF3ria.\"), mdx(\"p\", null, \"O \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/api/stream.html\"\n  }), \"m\\xF3dulo \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"stream\")), \" prov\\xEA a funda\\xE7\\xE3o da qual todas APIs de streaming s\\xE3o feitas. Todas streams s\\xE3o inst\\xE2ncias do \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/api/events.html#events_class_eventemitter\"\n  }), \"EventEmitter\")), mdx(\"h2\", null, \"Porqu\\xEA streams\"), mdx(\"p\", null, \"Streams basicamente nos d\\xE3o duas grandes vantagens sobre outros m\\xE9todos de manipula\\xE7\\xE3o de dados:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Efici\\xEAncia de mem\\xF3ria\"), \": voc\\xEA n\\xE3o precisa carregar grandes quantidades de dados em mem\\xF3ria antes de ser capaz de process\\xE1-los\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Efici\\xEAncia temporal\"), \": menos tempo \\xE9 requerido para come\\xE7ar a processar dados, uma vez que voc\\xEA pode come\\xE7ar a processar assim que os tiver, em vez de esperar at\\xE9 que toda carga \\xFAtil de dados esteja dispon\\xEDvel\")), mdx(\"h2\", null, \"Um exemplo de stream\"), mdx(\"p\", null, \"Um exemplo t\\xEDpico \\xE9 ler arquivos de um disco.\"), mdx(\"p\", null, \"Usando o m\\xF3dulo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fs\"), \" do Node.js, voc\\xEA pode ler um arquivo, e serv\\xED-lo com HTTP quando uma nova conex\\xE3o \\xE9 estabelecida no seu servidor HTTP:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const http = require('http')\\nconst fs = require('fs')\\n\\nconst server = http.createServer(function(req, res) {\\n  fs.readFile(__dirname + '/data.txt', (err, data) => {\\n    res.end(data)\\n  })\\n})\\nserver.listen(3000)\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readFile()\"), \" l\\xEA todo conte\\xFAdo do arquivo, e invoca uma fun\\xE7\\xE3o callback quando terminar.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"res.end(data)\"), \" na callbac vai retornar o conte\\xFAdo do arquivo para o client HTTP.\"), mdx(\"p\", null, \"Se o arquivo for grande, a opera\\xE7\\xE3o vai demorar um pouco. Aqui temos a mesma funcionalidade usando streams:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const http = require('http')\\nconst fs = require('fs')\\n\\nconst server = http.createServer((req, res) => {\\n  const stream = fs.createReadStream(__dirname + '/data.txt')\\n  stream.pipe(res)\\n})\\nserver.listen(3000)\\n\")), mdx(\"p\", null, \"Em vez de esperar at\\xE9 que o arquivo seja completamente lido, n\\xF3s come\\xE7amos a \\\"stream\\xE1-lo\\\" para o client HTTP assim que tivermos chunks de dados prontos para serem enviados.\"), mdx(\"h2\", null, \"pipe()\"), mdx(\"p\", null, \"O exemplo acima usa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stream.pipe(res)\"), \": o m\\xE9todo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipe()\"), \" \\xE9 chamado na stream de arquivo.\"), mdx(\"p\", null, \"O que esse c\\xF3digo faz? Ele pega a origem, e canaliza para um destino.\"), mdx(\"p\", null, \"Voc\\xEA chama isso na stream origem, e nesse caso, a stream de arquivo \\xE9 canalizada para a resposta HTTP.\"), mdx(\"p\", null, \"O valor retornado pelo m\\xE9todo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipe()\"), \" \\xE9 a stream de destino, que \\xE9 algo muito conveniente pois nos permite encadear m\\xFAltiplas chamadas \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipe()\"), \", desse jeito:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"src.pipe(dest1).pipe(dest2)\\n\")), mdx(\"p\", null, \"Isso faz o mesmo que\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"src.pipe(dest1)\\ndest1.pipe(dest2)\\n\")), mdx(\"h2\", null, \"APIs Node.js baseadas em streams\"), mdx(\"p\", null, \"Dadas as suas vantagens, muitos dos m\\xF3dulos principais do Node.js fornecem recursos nativos para manipula\\xE7\\xE3o de streams, sendo os mais not\\xE1veis:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process.stdin\"), \" retorna uma stream conectada ao stdin\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process.stdout\"), \" retorna uma stream conectada ao stdout\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process.stderr\"), \" retorna uma stream conectada ao stderr\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fs.createReadStream()\"), \" cria uma stream de leitura para um arquivo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fs.createWriteStream()\"), \" cria uma stream de escrita para um arquivo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"net.connect()\"), \" inicia uma stream baseada em conex\\xE3o\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http.request()\"), \" retorna uma inst\\xE2ncia da classe http.ClientRequest, que \\xE9 uma stream de escrita\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zlib.createGzip()\"), \" comprime dados usando gzip (um algoritmo de compress\\xE3o) em uma stream\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zlib.createGunzip()\"), \" descomprime uma stream gzip.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zlib.createDeflate()\"), \" comprime dados usando deflate (um algoritmo de compress\\xE3o) em uma stream\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zlib.createInflate()\"), \" descomprime uma stream deflate.\")), mdx(\"h2\", null, \"Diferentes tipos de streams\"), mdx(\"p\", null, \"Existem quatro classes de streams:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Readable\"), \": uma stream de onde voc\\xEA pode canalizar, mas n\\xE3o canalizar dados nela (voc\\xEA pode receber dados, mas n\\xE3o pode enviar dados). Quando voc\\xEA coloca dados em uma stream de leitura, os dados s\\xE3o bufferizados, at\\xE9 que um consumer comece a ler os dados.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Writable\"), \": uma stream em que voc\\xEA pode canalizar dados, mas n\\xE3o obter dados dela (voc\\xEA pode enviar dados, mas n\\xE3o pode receber).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Duplex\"), \": uma stream em que voc\\xEA pode tanto canalizar dados quando obt\\xEA-los, basicamente uma combina\\xE7\\xE3o de uma stream Readable e uma Writable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Transform\"), \": uma stream Transform \\xE9 similar a uma Duplex, mas a sa\\xEDda \\xE9 um transform das entradas\")), mdx(\"h2\", null, \"Como criar uma stream de leitura (readable stream)\"), mdx(\"p\", null, \"N\\xF3s obt\\xEAmos a stream de leitura pelo \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/api/stream.html\"\n  }), \"m\\xF3dulo \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"stream\")), \", a inicializamos e implementamos o m\\xE9todo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readable._read()\"), \".\"), mdx(\"p\", null, \"Primeiro crie um objeto stream:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Stream = require('stream')\\nconst readableStream = new Stream.Readable()\\n\")), mdx(\"p\", null, \"ent\\xE3o implemente o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_read\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"readableStream._read = () => {}\\n\")), mdx(\"p\", null, \"Voc\\xEA tamb\\xE9m pode implementar o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_read\"), \" usando a op\\xE7\\xE3o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"read\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const readableStream = new Stream.Readable({\\n  read() {}\\n})\\n\")), mdx(\"p\", null, \"Agora que a stream est\\xE1 inicializada, n\\xF3s podemos enviar dados a ela:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"readableStream.push('hi!')\\nreadableStream.push('ho!')\\n\")), mdx(\"h2\", null, \"Como criar uma stream de escrita (writable stream)\"), mdx(\"p\", null, \"Para criar uma stream de escrita n\\xF3s extendemos o objeto base \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Writable\"), \", e implementamos seu m\\xE9todo \\\\ _write().\"), mdx(\"p\", null, \"Primeiro crie um objeto stream:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Stream = require('stream')\\nconst writableStream = new Stream.Writable()\\n\")), mdx(\"p\", null, \"e ent\\xE3o implemente o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_write\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"writableStream._write = (chunk, encoding, next) => {\\n  console.log(chunk.toString())\\n  next()\\n}\\n\")), mdx(\"p\", null, \"Agora voc\\xEA pode canalizar uma stream de leitura nele:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"process.stdin.pipe(writableStream)\\n\")), mdx(\"h2\", null, \"Como obt\\xEAr dados de uma stream de leitura\"), mdx(\"p\", null, \"Como n\\xF3s lemos dados de uma stream de leitura? Usando uma stream de escrita:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Stream = require('stream')\\n\\nconst readableStream = new Stream.Readable({\\n  read() {}\\n})\\nconst writableStream = new Stream.Writable()\\n\\nwritableStream._write = (chunk, encoding, next) => {\\n  console.log(chunk.toString())\\n  next()\\n}\\n\\nreadableStream.pipe(writableStream)\\n\\nreadableStream.push('hi!')\\nreadableStream.push('ho!')\\n\")), mdx(\"p\", null, \"Voc\\xEA tamb\\xE9m pode consumir uma stream de leitura diretamente, usando o evento \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readble\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"readableStream.on('readable', () => {\\n  console.log(readableStream.read())\\n})\\n\")), mdx(\"h2\", null, \"Como enviar dados para uma stream de escrita\"), mdx(\"p\", null, \"Usando o m\\xE9todo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"write()\"), \" da stream:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"writableStream.write('hey!\\\\n')\\n\")), mdx(\"h2\", null, \"Sinalizando a uma stream de escrita que voc\\xEA terminou de escrever\"), mdx(\"p\", null, \"Use o m\\xE9todo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end()\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Stream = require('stream')\\n\\nconst readableStream = new Stream.Readable({\\n  read() {}\\n})\\nconst writableStream = new Stream.Writable()\\n\\nwritableStream._write = (chunk, encoding, next) => {\\n  console.log(chunk.toString())\\n  next()\\n}\\n\\nreadableStream.pipe(writableStream)\\n\\nreadableStream.push('hi!')\\nreadableStream.push('ho!')\\n\\nwritableStream.end()\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#o-que-são-streams","title":"O que são streams"},{"url":"#porquê-streams","title":"Porquê streams"},{"url":"#um-exemplo-de-stream","title":"Um exemplo de stream"},{"url":"#pipe","title":"pipe()"},{"url":"#apis-nodejs-baseadas-em-streams","title":"APIs Node.js baseadas em streams"},{"url":"#diferentes-tipos-de-streams","title":"Diferentes tipos de streams"},{"url":"#como-criar-uma-stream-de-leitura-readable-stream","title":"Como criar uma stream de leitura (readable stream)"},{"url":"#como-criar-uma-stream-de-escrita-writable-stream","title":"Como criar uma stream de escrita (writable stream)"},{"url":"#como-obtêr-dados-de-uma-stream-de-leitura","title":"Como obtêr dados de uma stream de leitura"},{"url":"#como-enviar-dados-para-uma-stream-de-escrita","title":"Como enviar dados para uma stream de escrita"},{"url":"#sinalizando-a-uma-stream-de-escrita-que-você-terminou-de-escrever","title":"Sinalizando a uma stream de escrita que você terminou de escrever"}]},"parent":{"__typename":"File","id":"dfe03d79-4ef1-5547-874a-834a230bf33a","relativePath":"node/0052-nodejs-streams/index.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"id":"e0266471-a669-58a3-8209-a73e1ee6e57f","fields":{"slug":"/introduction","title":"Paulo Luan"}}},{"node":{"id":"3eb88639-8ea8-5254-a79f-49316ad1d843","fields":{"slug":"/node","title":"Introdução ao Node.js"}}},{"node":{"id":"a65b4705-0eed-56e8-b4b6-933dedb24081","fields":{"slug":"/","title":"Introdução"}}},{"node":{"id":"c1d78226-41d1-53fa-98cd-4324f3f64c51","fields":{"slug":"/node/0002-node-history/index","title":"Uma breve história do Node.js"}}},{"node":{"id":"a60f70d6-5a6d-50d5-9bb6-519bff91cb69","fields":{"slug":"/node/0003-node-installation/index","title":"Como instalar o Node.js"}}},{"node":{"id":"24217dad-9f68-5aa2-a200-4abb2dae9045","fields":{"slug":"/node/0004-node-javascript-language/index","title":"Quanto de JavaScript você precisa saber para usar Node.js?"}}},{"node":{"id":"87331b12-77e3-5bc6-be54-cdd64f0fcc04","fields":{"slug":"/node/0005-node-difference-browser/index","title":"Diferenças entre Node.js e o navegador"}}},{"node":{"id":"2e478353-d8ea-5b3c-8c24-da6d6ab54ec4","fields":{"slug":"/node/0006-v8/index","title":"O V8 JavaScript Engine"}}},{"node":{"id":"74b2fb83-e6b8-5ecd-bcb9-aefe9cea3579","fields":{"slug":"/node/0007-node-run-cli/index","title":"Execute scripts Node.js na linha de comando"}}},{"node":{"id":"72f74f63-be28-52dd-b28d-e4b0ddf37c38","fields":{"slug":"/node/0008-node-terminate-program/index","title":"Como sair de um programa Node.js"}}},{"node":{"id":"03b7e9f9-2f56-55be-bff6-81e460683e80","fields":{"slug":"/node/0009-node-environment-variables/index","title":"Como ler variáveis de ambiente do Node.js"}}},{"node":{"id":"6c2ddae1-21e0-5919-8bee-e7cbc2498d07","fields":{"slug":"/node/0011-node-repl/index","title":"Como usar o REPL no Node.js"}}},{"node":{"id":"b60252a2-b605-5de5-a10c-bacf4113f114","fields":{"slug":"/node/0012-node-cli-args/index","title":"Node.js, aceite os argumentos da linha de comando"}}},{"node":{"id":"bb8ed934-3dad-57b7-ad84-044989fca4bb","fields":{"slug":"/node/0013-node-output-to-cli/index","title":"Saída para a linha de comando usando Node.js"}}},{"node":{"id":"48a09f43-b163-5af6-a1c6-0eb01d251967","fields":{"slug":"/node/0014-node-input-from-cli/index","title":"Aceite a entrada da linha de comando em Node.js"}}},{"node":{"id":"8bc84d66-1daf-5902-8743-cd9f3ce7106a","fields":{"slug":"/node/0015-node-export-module/index","title":"Expor a funcionalidade de um arquivo Node.js usando exportações"}}},{"node":{"id":"73b8fa3e-f32a-5090-b2f9-5f21f0336cc4","fields":{"slug":"/node/0016-npm/index","title":"Uma introdução ao gerenciador de pacotes npm"}}},{"node":{"id":"f4072ca1-a31b-5f81-81be-64f56a6441ce","fields":{"slug":"/node/0017-where-npm-install-packages/index","title":"Onde o npm instala os pacotes?"}}},{"node":{"id":"8bf59d0c-c67a-595c-a8fe-1489b256d33a","fields":{"slug":"/node/0018-how-to-use-npm-package/index","title":"Como usar ou executar um pacote instalado usando npm"}}},{"node":{"id":"974db50b-ec9a-5bdb-883e-8bcda95bf761","fields":{"slug":"/node/0019-package-json/index","title":"O guia do package.json"}}},{"node":{"id":"1962c60d-09c5-55d9-86b2-fb678203eae2","fields":{"slug":"/node/0020-package-lock-json/index","title":"O arquivo package-lock.json"}}},{"node":{"id":"87b508b5-b0fa-5413-9129-5fd004723a21","fields":{"slug":"/node/0021-npm-know-version-installed/index","title":"Encontre a versão instalada de um pacote npm"}}},{"node":{"id":"82b79031-4d25-53fc-b40d-5de939aafe51","fields":{"slug":"/node/0022-npm-install-previous-package-version/index","title":"Instale uma versão mais antiga de um pacote npm"}}},{"node":{"id":"229f0d99-8cf4-5e86-b288-8b455f9a83d5","fields":{"slug":"/node/0023-update-npm-dependencies/index","title":"Atualize todas as dependências do Node.js para a versão mais recente"}}},{"node":{"id":"0b56f8e2-557a-5e40-b771-362e99ef2bc9","fields":{"slug":"/node/0024-npm-semantic-versioning/index","title":"Semantic Versioning com npm"}}},{"node":{"id":"b0887957-09fb-5d06-a04d-32609d07a364","fields":{"slug":"/node/0025-npm-uninstall-packages/index","title":"Desinstalando pacotes npm"}}},{"node":{"id":"7021fb86-c28d-5770-abfe-3af156474354","fields":{"slug":"/node/0026-npm-packages-local-global/index","title":"Pacotes npm global ou local"}}},{"node":{"id":"d951f70a-a345-57c5-b486-9e2e134efc4f","fields":{"slug":"/node/0027-npm-dependencies-devdependencies/index","title":"npm dependencies e devDependencies"}}},{"node":{"id":"41304e55-ffc5-5626-9bce-2d7a01ca231c","fields":{"slug":"/node/0028-npx/index","title":"O npx Package Runner"}}},{"node":{"id":"a12f8be2-e2cc-5093-bc61-4df3114f9465","fields":{"slug":"/node/0029-node-event-loop/index","title":"Event Loop"}}},{"node":{"id":"b3f4e9ef-31e8-512b-9bf6-e70822e4e36f","fields":{"slug":"/node/0031-node-setimmediate/index","title":"Entendendo setImmediate()"}}},{"node":{"id":"a3e0cbbc-60e0-5718-a461-8993e5632f90","fields":{"slug":"/node/0030-node-process-nexttick/index","title":"Entendendo process.nextTick()"}}},{"node":{"id":"8365a4c8-6115-56f9-81c9-c3fb6e9607fb","fields":{"slug":"/node/0033-javascript-callbacks/index","title":"Programação assíncrona de JavaScript e Callbacks"}}},{"node":{"id":"ebe3091e-3d10-57e1-968d-8fe5508beeb8","fields":{"slug":"/node/0032-javascript-timers/index","title":"JavaScript Timers"}}},{"node":{"id":"552a2643-b6ba-568c-b87f-cb5dab79de14","fields":{"slug":"/node/0034-javascript-promises/index","title":"Entendendo JavaScript Promises"}}},{"node":{"id":"41d1dbbd-3396-54bd-8963-cc4f9be94529","fields":{"slug":"/node/0035-javascript-async-await/index","title":"JavaScript assíncrono moderno com Async e Await"}}},{"node":{"id":"95ca7401-7657-5f87-87d1-dcaf33fd9db1","fields":{"slug":"/node/0036-node-event-emitter/index","title":"Event emitter"}}},{"node":{"id":"727ae026-4c54-5035-8d91-1b6b3de010ed","fields":{"slug":"/node/0037-node-http-server/index","title":"Construindo um servidor HTTP"}}},{"node":{"id":"5d5b5e5d-9198-591b-b040-0392591636f0","fields":{"slug":"/node/0038-node-make-http-requests/index","title":"Fazer solicitações HTTP com Node.js"}}},{"node":{"id":"7f813a35-e9df-5d4f-8ee7-bf3af09dbabe","fields":{"slug":"/node/0039-node-http-post/index","title":"Faça uma requisição HTTP POST usando Node.js"}}},{"node":{"id":"93bca157-15bb-58c8-a20b-9fb41b955c0f","fields":{"slug":"/node/0040a-node-request-data/index","title":"Get HTTP request body data usando Node.js"}}},{"node":{"id":"01d49200-0669-51f1-944f-06afdc2a8351","fields":{"slug":"/node/0040b-node-file-descriptors/index","title":"Trabalhar com descritores de arquivo em Node.js"}}},{"node":{"id":"60adc125-2516-5075-8a28-c31591de43c9","fields":{"slug":"/node/0041-node-file-stats/index","title":"Como obter os detalhes de um arquivo usando Node.js"}}},{"node":{"id":"648ccb00-734a-52f7-b52b-a0cfaadb5d9b","fields":{"slug":"/node/0042-node-file-paths/index","title":"Path de arquivo Node.js"}}},{"node":{"id":"dbe6f52d-ee4c-5e86-9254-c204e09e1df7","fields":{"slug":"/node/0043-node-reading-files/index","title":"Como Ler arquivos usando Node.js"}}},{"node":{"id":"66f59a75-32c5-556d-9e3d-b05ff33a00e8","fields":{"slug":"/node/0044-node-writing-files/index","title":"Gravando arquivos com Node.js"}}},{"node":{"id":"428fca48-25a3-5d79-9fc2-ee81f898b4f6","fields":{"slug":"/node/0045-node-folders/index","title":"Trabalho com pastas em Node.js"}}},{"node":{"id":"ac253387-0255-5eab-8acc-fe25eddde94f","fields":{"slug":"/node/0046-node-module-fs/index","title":"O módulo fs do Node.js"}}},{"node":{"id":"c4ae8989-d9b9-5d4f-a993-0301d8fe91b9","fields":{"slug":"/node/0047-node-module-path/index","title":"O módulo de path do Node.js"}}},{"node":{"id":"24b4f530-d9ec-5599-9b6d-d1619a39b544","fields":{"slug":"/node/0048-node-module-os/index","title":"O módulo de sistema operacional Node.js."}}},{"node":{"id":"a1747dce-79a2-567d-a4a8-02fcb754b009","fields":{"slug":"/node/0049-node-module-events/index","title":"O módulo de eventos do Node.js"}}},{"node":{"id":"265489d4-29af-5add-acdc-bf29f99a943c","fields":{"slug":"/node/0050-node-module-http/index","title":"O módulo http do Node.js"}}},{"node":{"id":"714cf4a1-26ee-5ed1-965f-27d8656075f0","fields":{"slug":"/node/0051-node-buffers/index","title":"Node.js Buffers"}}},{"node":{"id":"c44130ab-1d0d-50fb-b50a-51c756a08689","fields":{"slug":"/node/0052-nodejs-streams/index","title":"Node.js Streams"}}},{"node":{"id":"0dd059c7-50b2-5237-bbaa-feef45f83419","fields":{"slug":"/node/0053-node-difference-dev-prod/index","title":"Node.js, a diferença entre desenvolvimento e produção"}}},{"node":{"id":"26489787-bfcb-563f-b781-88b48de6a718","fields":{"slug":"/node/0054-node-exceptions/index","title":"Tratamento de erros no Node.js"}}},{"node":{"id":"cfdfbe3e-9ccc-54ab-b60f-3d8dbe786a47","fields":{"slug":"/node/0055-node-inspect-object/index","title":"Como Loggar um objeto no Node.js"}}}]}},"pageContext":{"id":"c44130ab-1d0d-50fb-b50a-51c756a08689"}}}